import numpy as np
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
import random
import geopandas as gpd


def make_mesh(box, w, h):  # 按照w,h对box进行网格划分
    [xmin, ymin, xmax, ymax] = box
    list_x=np.arange(xmin, xmax, w)
    list_y=np.arange(ymin, ymax, h)
    polygon_list = []
    for i in range(len(list_x)):
        for j in range(len(list_y)):
            xleft = list_x[i]
            ydown = list_y[j]
            if i == len(list_x)-1:
                xright = xmax
            else:
                xright = list_x[i+1]
            if j == len(list_y)-1:
                yup = ymax
            else:
                yup = list_y[j+1]
            rectangle = Polygon([(xleft, ydown), (xright, ydown), (xright, yup), (xleft, yup)])
            polygon_list.append(rectangle)

    return gpd.GeoSeries(polygon_list)


def init_nodes(n, b, r):  # n为结点总个数，b为划分区域数, r为通信半径
    seeds = []
    nodes = []
    i = 0
    while i < b:
        seed = {'xd': random.random() * xmax, 'yd': random.random() * ymax,
                'dx': random.random() * xmax/2, 'dy': random.random() * ymax/2}
        # xy坐标 dx、dy可拓展的区域范围
        seeds.append(seed)
        nodes.append(seed)
        i = i + 1
        '''
        if i != 0:
            # 判断该点是否与其他点距离太近，太近舍去
            for j in range(0, i-1):
                if abs(seeds[j]['xd'] - seed['xd']) < 2*r and abs(seeds[j]['yd'] - seed['yd']) < 2*r:
                    break
                else:
                    if j == i - 1:
                        seeds.append(seed)
                        nodes.append(seed)
                        i = i + 1
                    else:
                        continue
        else:
            continue
         '''

    for index, seed in enumerate(seeds):
        x_left = max(seed['xd']+seed['dx']/2, xmin)
        x_right = min(seed['xd']+seed['dx']/2, xmax)
        y_left = max(seed['yd']+seed['dy']/2, ymin)
        y_right = min(seed['yd']+seed['dy']/2, ymax)
        bn = 0  # 每个区域中含有的点数,上限不超过b/n
        while bn < n/b:
            node_apt = {'xd': random.random() * (x_right-x_left) + x_left,
                        'yd': random.random() * (y_right-y_left) + y_left}
            nodes.append(node_apt)
            bn = bn + 1
            '''
            for j, node in enumerate(nodes):
                if abs(node['xd'] - node_apt['xd']) < 2*r and abs(node['yd'] - node_apt['yd']) < 2*r:
                    break
                else:
                    if j == len(nodes) - 1:
                        nodes.append(node_apt)
                        bn = bn + 1
                    else:
                        continue'''
    return nodes


# PARAMETERS ###########################
[xmin, ymin, xmax, ymax] = [0, 0, 100, 100]
[w, h] = [5, 5]
sink = {'xd': 0, 'yd': 0}   # 基站定义
sink['xd'] = xmax/2  # 基站横坐标
sink['yd'] = ymax-10  # 基站纵坐标
density = 3/10    # 节点密度
n = int(xmax*ymax*density)   # 节点个数
print('预计生成的结点数：', n)
R = 5   # 节点通信半径
B = 15   # 生成的区域数

# END OF PARAMETERS #####################
gdf = make_mesh([xmin, ymin, xmax, ymax], w, h)
gdf.boundary.plot()
print(gdf)
nodes = init_nodes(n, B, R)  # 传入参数分别为：结点总数，区域数，通信半径
nodes.append(sink)
print('实际生成的结点数：', len(nodes))
for i in range(0, len(nodes)-1):
    plt.plot(nodes[i]['xd'], nodes[i]['yd'], 'k.')

plt.plot(sink['xd'], sink['yd'], 'rp')  # 绘制sink点
plt.annotate('sink', xy=(sink['xd'], sink['yd']), xytext=(-20, 10),
             textcoords='offset points', fontsize=12, color='r')
plt.show()
